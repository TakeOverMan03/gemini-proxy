// api/gemini.js
// –†–æ—Ç–∞—Ü–∏—è –º–µ–∂–¥—É –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–ª—é—á–∞–º–∏ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –∫–≤–æ—Ç—ã.
// –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Node 18+ (Vercel), –≥–ª–æ–±–∞–ª—å–Ω—ã–π fetch –≤—Å—Ç—Ä–æ–µ–Ω.

const apiKeys = [
  process.env.GOOGLE_API_KEY_1, // –Ω–æ–≤—ã–π –∫–ª—é—á
  process.env.GOOGLE_API_KEY_2  // –∑–∞–ø–∞—Å–Ω–æ–π –∫–ª—é—á
];

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  const body = req.body;

  // üëá –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º safetySettings (—Å–Ω–∏–º–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã)
  body.safetySettings = [
    { category: 'HARM_CATEGORY_HATE_SPEECH', threshold: 'BLOCK_NONE' },
    { category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT', threshold: 'BLOCK_NONE' },
    { category: 'HARM_CATEGORY_DANGEROUS_CONTENT', threshold: 'BLOCK_NONE' },
    { category: 'HARM_CATEGORY_HARASSMENT', threshold: 'BLOCK_NONE' },
    { category: 'HARM_CATEGORY_CIVIC_INTEGRITY', threshold: 'BLOCK_NONE' }
  ];

  let lastError = null;

  // üîÑ –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫–ª—é—á–∏
  for (let i = 0; i < apiKeys.length; i++) {
    const key = apiKeys[i];
    if (!key) continue; // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ

    const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=${key}`;
    console.log(`‚ñ∂Ô∏è –ü—Ä–æ–±—É—é –∫–ª—é—á #${i + 1}`);

    try {
      const gRes = await fetch(url, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(body),
      });

      const data = await gRes.json();

      if (gRes.ok) {
        // ‚úÖ –£—Å–ø–µ—Ö ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É
        return res.status(200).json(data);
      } else {
        // –ï—Å–ª–∏ –∫–≤–æ—Ç–∞ –∫–æ–Ω—á–∏–ª–∞—Å—å ‚Äî –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π
        if (
          data.error &&
          data.error.message &&
          data.error.message.toLowerCase().includes('quota')
        ) {
          console.warn(`‚ö†Ô∏è –ö–ª—é—á #${i + 1} –∏—Å—á–µ—Ä–ø–∞–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π‚Ä¶`);
          lastError = data;
          continue; // –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∫–ª—é—á
        } else {
          // –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ ‚Äî —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
          return res.status(gRes.status).json(data);
        }
      }
    } catch (err) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å –∫–ª—é—á–æ–º #${i + 1}:`, err);
      lastError = err;
      continue;
    }
  }

  // üö´ –ï—Å–ª–∏ –≤—Å–µ –∫–ª—é—á–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å
  res.status(429).json({
    error: '–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ API-–∫–ª—é—á–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
    details: lastError
  });
}
